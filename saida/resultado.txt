================================== Ai Message ==================================

```csharp
//Inicio:BaseEntity.cs
using System.Reflection;

namespace ConectaFapes.Domain.Common
{
    public class BaseEntity
    {
        public int Id { get; set; }

        public void Update(BaseEntity entity)
        {
            foreach (PropertyInfo property in entity.GetType().GetProperties())
            {
                if (property.CanWrite && property.Name != nameof(Id))
                {
                    property.SetValue(this, property.GetValue(entity));
                }
            }
        }
    }
}
//Fim:BaseEntity.cs

//Inicio:Produto.cs
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;

namespace ConectaFapes.Domain.Entities
{
    public class Produto : BaseEntity
    {
        public string Nome { get; set; } = string.Empty;
        public decimal Preco { get; set; }
        public int CategoriaId { get; set; }

        [ForeignKey("CategoriaId")]
        public virtual Categoria Categoria { get; set; } = null!;

        public Produto() { }

        public Produto(string nome, decimal preco, int categoriaId)
        {
            // Regras de Negócio
            if (preco <= 0)
            {
                throw new ArgumentException("Preço deve ser maior que zero.");
            }

            if (string.IsNullOrEmpty(nome))
            {
                throw new ArgumentException("Nome não pode ser vazio.");
            }

            Nome = nome;
            Preco = preco;
            CategoriaId = categoriaId;
        }
    }
}
//Fim:Produto.cs

//Inicio:Categoria.cs
using System.Collections.Generic;

namespace ConectaFapes.Domain.Entities
{
    public class Categoria : BaseEntity
    {
        public string Nome { get; set; } = string.Empty;
        public virtual ICollection<Produto> Produtos { get; set; } = new List<Produto>();

        public Categoria() { }

        public Categoria(string nome)
        {
            // Regras de Negócio
            if (string.IsNullOrEmpty(nome))
            {
                throw new ArgumentException("Nome não pode ser vazio.");
            }

            Nome = nome;
        }
    }
}
//Fim:Categoria.cs

//Inicio:Usuario.cs
using System.ComponentModel.DataAnnotations;

namespace ConectaFapes.Domain.Entities
{
    public class Usuario : BaseEntity
    {
        public string Nome { get; set; } = string.Empty;

        [EmailAddress(ErrorMessage = "Email inválido.")]
        public string Email { get; set; } = string.Empty;

        [MinLength(8, ErrorMessage = "Senha deve ter no mínimo 8 caracteres.")]
        public string Senha { get; set; } = string.Empty;

        public Usuario() { }

        public Usuario(string nome, string email, string senha)
        {
            // Regras de Negócio
            if (!IsValidEmail(email))
            {
                throw new ArgumentException("Email inválido.");
            }

            if (!IsUniqueEmail(email))
            {
                throw new ArgumentException("Email já cadastrado.");
            }

            if (senha.Length < 8)
            {
                throw new ArgumentException("Senha deve ter no mínimo 8 caracteres.");
            }

            Nome = nome;
            Email = email;
            Senha = senha;
        }

        // Funções Auxiliares para Regras de Negócio
        private bool IsValidEmail(string email)
        {
            // Implementação de validação de email
            return new EmailAddressAttribute().IsValid(email);
        }

        private bool IsUniqueEmail(string email)
        {
            // Implementação de verificação de unicidade
            // (Simulação - Substitua por lógica real de banco de dados)
            return !email.Equals("usuarioexistente@example.com", StringComparison.OrdinalIgnoreCase);
        }
    }
}
//Fim:Usuario.cs

//Inicio:Resolucao.cs
using ConectaFapes.Domain.Common;
using ConectaFapes.Domain.Validation;
using System.Reflection;

namespace ConectaFapes.Domain.Entities.CadastroModalidadesBolsas
{
    public class Resolucao : BaseEntity
    {
        public int Numero { get; set; }
        public DateTimeOffset Data { get; set; }
        public string Ementa { get; set; } = String.Empty;
        public string Link { get; set; } = String.Empty;
        public ICollection<VersaoModalidade> VersaoModalidadesBolsas { get; } = [];

        public Resolucao() { }

        public Resolucao(int numero, DateTimeOffset data, string ementa, string link)
        {
            var validationErrors = ResolucaoValidation(numero, data, ementa, link);

            if (validationErrors.Count > 0)
            {
                throw new DomainValidationException(validationErrors);
            }

            Numero = numero;
            Data = data;
            Ementa = ementa;
            Link = link;
        }

        public bool PossuiModalidades()
        {
            return (VersaoModalidadesBolsas.Count() <= 0 || VersaoModalidadesBolsas == null) ? false : true;
        }

        private List<string> ResolucaoValidation(int numero, DateTimeOffset data, string ementa, string link)
        {
            var errors = new List<string>();

            if (numero < 0) errors.Add("O número da resolução não pode ser negativo");
            if (string.IsNullOrEmpty(ementa)) errors.Add("A ementa da resolução não pode ser vazia");
            if (string.IsNullOrEmpty(link)) errors.Add("O link da resolução não pode ser vazia");

            return errors;
        }

        public void AdicionarVersaoModalidade(VersaoModalidade VersaoModalidade)
        {
            VersaoModalidadesBolsas.Add(VersaoModalidade);
        }
    }
}


//Fim:Resolucao.cs
```